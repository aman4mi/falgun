# Spring DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)
spring.datasource.url=jdbc:postgresql://localhost:5432/springbootdb
spring.datasource.username= postgres
spring.datasource.password= postgres
# Disable feature detection by this undocumented parameter. Check the org.hibernate.engine.jdbc.internal.JdbcServiceImpl.configure method for more details.
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults = false
# Because detection is disabled you have to set correct dialect by hand.
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQL9Dialect
# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto = update
#server address
server.address=192.168.0.113
#server.servlet.contextPath=/index
server.port=8080
#Allow Thymeleaf templates to be reloaded at dev time
spring.thymeleaf.cache=false
#Show or not log for each sql query
spring.jpa.show-sql = true
#Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1
#Spring Security / Queries for AuthenticationManagerBuilder
spring.queries.users-query=select email, password, active from user_tab where email=?
spring.queries.roles-query=select u.email, r.role from user_tab u inner join user_role ur on(u.user_id=ur.user_id) inner join role r on(ur.role_id=r.role_id) where u.email=?
#Initialize the database using data.sql script
spring.datasource.initialization-mode=always








